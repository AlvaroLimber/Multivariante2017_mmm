d
names(d)<-c("Dominio","item",paste("p",1:p,sep=""),paste("q",1:p,sep=""))
d
for(i in 1:n){
set.seed(321*i)
d[i,3:(p+2)]<-round(runif(p,5*i,10*i),0)
set.seed(123*i)
d[i,(p+3):(2+2*p)]<-round(runif(p,10,50),0)
}
d
for(i in 1:n){
set.seed(321*i)
d[i,3:(p+2)]<-round(runif(p,5*i*0.5,10*i0.5),0)
set.seed(123*i)
d[i,(p+3):(2+2*p)]<-round(runif(p,10,50),0)
}
for(i in 1:n){
set.seed(321*i)
d[i,3:(p+2)]<-round(runif(p,5*i*0.5,10*i*0.5),0)
set.seed(123*i)
d[i,(p+3):(2+2*p)]<-round(runif(p,10,50),0)
}
d
for(i in 1:n){
set.seed(321*i)
d[i,3:(p+2)]<-round(runif(p,5*i*0.5,10*i*0.5),0)
set.seed(1234*i)
d[i,(p+3):(2+2*p)]<-round(runif(p,10*0.2,50*0.2),0)
}
d
for(i in 1:n){
set.seed(321*i)
d[i,3:(p+2)]<-round(runif(p,5*i*0.5,10*i*0.5),0)
set.seed(1234*i)
d[i,(p+3):(2+2*p)]<-round(runif(p,10*0.9,50*0.9),0)
}
names(d)<-c("Dominio","item",paste("p",1:p,sep=""),paste("q",1:p,sep=""))
d
names(d)<-c("Dominio","item",paste("p",1:p,sep=""),paste("q",1:p,sep=""))
d
d<-d[order(d$Dominio),]
d[,2]<-1:n
d
setwd("/home/alvarolimber/Dropbox/UMSA_docente/2016/EST290")
setwd("/Users/iMac6/Dropbox/UMSA_docente/2016/EST290")
names(d)<-c("Dominio","Artículo",paste("p",1:p,sep=""),paste("q",1:p,sep=""))
d
simpleMessage("hhgfh")
combn(4,2)
combn(c("a","b","c"),2)
combn(c("a","b","c","3"),2)
combn(c("a","b","c","3"),20)
?combn(c("a","b","c","3"),20)
choose(4,2)
choose(6,2)
choose(6,2)
choose(52,2)
(choose(52,2)*choose(52,2))/choose(52,2)
(choose(48,1)*choose(4,1))/choose(52,2)
dhyper(1,48,4,2)
(choose(48,1)*choose(4,1))/choose(52,2)
dhyper(1,48,4,2)
plot(dhyper(1,48,4,2))
dhyper(1,48,4,2)
dev.off()
dev.off()
dev.off()
rbinom(100,1,0.5)
barplot(rbinom(100,1,0.5))
barplot(table(rbinom(100,1,0.5)))
dev.off()
for(i in 0:10){
barplot(table(rbinom(100*(0.5**i),1,0.5)))
barplot(table(rbinom(100*(0.5**i),1,0.5)))
}
for(i in 0:10){
barplot(table(rbinom(100*(0.5**i),1,0.5)))
}
barplot(table(rbinom(100*(0.5**i),1,0.5)))
i<-1
barplot(table(rbinom(100*(0.5**i),1,0.5)))
i<-0
barplot(table(rbinom(100*(0.5**i),1,0.5)))
dev.off()
par(mfrow=c(3,3))
for(i in 0:8){
barplot(table(rbinom(100*(0.5**i),1,0.5)))
}
par(mfrow=c(3,3))
for(i in 0:8){
barplot(table(rbinom(100*(0.5**i),1,0.5)))
}
dev.off()
dev.off()
points(rnomr(100),rnorms(100),col=colors()[1:100])
points(rnorms(100),rnorms(100),col=colors()[1:100])
points(rnorm(100),rnorm(100),col=colors()[1:100])
dev.off()
dev.off()
points(rnorm(100),rnorm(100),col=colors()[1:100])
plot(rnorm(100),rnorm(100),col=colors()[1:100])
plot(rnorm(100),rnorm(100),col=colors()[1:100],xlim=c(-5,5),ylim=c(-5,5))
plot(rnorm(1000),rnorm(1000),col=colors()[1:100],xlim=c(-4,4),ylim=c(-4,4))
plot(rnorm(10000),rnorm(10000),col=colors()[1:100],xlim=c(-4,4),ylim=c(-4,4))
hist(rnorm(10000))
hist(rbinom(10000))
hist(rbinom(10000,10,0.5))
hist(rbinom(10000,10000000,0.00005))
hist(rexp(1000,1))
hist(rexp(1000,10))
hist(rexp(1000,1/10))
hist(rexp(1000,-1/10))
hist(rexp(1000,1/10))
funcionCuad  <-  function(x) {
(-x+10)^2 -20
}
plot(funcionCuad)
plot(funcionCuad,xlim=c(-100,100),ylim=c(-100,100))
plot(funcionCuad,xlim=c(-100,100),ylim=c(-1000,1000))
plot(funcionCuad,xlim=c(-100,100),ylim=c(0,1000))
plot(funcionCuad,xlim=c(-100,100),ylim=c(0,10000000))
plot(funcionCuad,xlim=c(-100,100),ylim=c(0,10000))
fuerzaBruta  <-  function(fn,  cotaMin,  cotaMax) {
menorValor <- fn(cotaMin) # Inicialización
solucion  <-  cotaMin
for (i in (cotaMin+1):cotaMax) {
valorActual  <-  fn(i)
if (valorActual < menorValor) {
menorValor  <-  valorActual
solucion  <-  i
}
}
resultado <-  data.frame(solucion,  menorValor)
names(resultado) <- c("Solución",  "Valor Objetivo")
resultado
}
fuerzaBruta(funcionCuad,10,100)
fuerzaBruta(funcionCuad,-10,100)
fuerzaBruta(funcionCuad,-100,100)
fuerzaBruta(funcionCuad,-1000,1000)
kable
library(knitr)
kable
?kable
?optim()
optim()
optim
y<-runif(100,1000,2000)
y
z<-1500
z-y
(z-y)/z
(z-y)/z
y
1300/1500
200/1500
(z-y)/z
(z-y)/z>0
(z-y)/z>0
(z-y)/z[(z-y)/z>0]
((z-y)/z)[(z-y)/z>0]
sum(((z-y)/z)[(z-y)/z>0])
sum(((z-y)/z)[(z-y)/z>0])/100
y[y<1500]
y[y<1500]<-y[y<1500]+0.088*1500
sum(((z-y)/z)[(z-y)/z>0])/100
(z-y)/z
sum(((z-y)/z)[(z-y)/z>0])/100
y[y<1500]<-y[y<1500]+0.047*1500
sum(((z-y)/z)[(z-y)/z>0])/100
y[y<1500]<-y[y<1500]+0.031*1500
sum(((z-y)/z)[(z-y)/z>0])/100
table(y<z)
y[y<1500]<-y[y<1500]+0.04*1500
table(y<z)
sum(((z-y)/z)[(z-y)/z>0])/100
source('~/.active-rstudio-document', echo=TRUE)
DIR
dir()
dir()
?read.spss
‘??read.spss’
bd1<-bd[,c("sexo,"edad","e","ylab","tohrs"")]
library(survey)
svydesign
?svydesign
data(api)
api
rm(list=ls())
data(api)
head(apistrat)
dclus1<-svydesign(id=dnum, weights=~pw, data=apiclus1, fpc=~fpc)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
dclus1<-svydesign(id="dnum", weights=~pw, data=apiclus1, fpc=~fpc)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
?svymean(,design=dclust)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
names(apiclus1)
svymean(~api00, dclus1, deff=TRUE)
svymean(~factor(stype),dclus1)
svymean(~interaction(stype, comp.imp), dclus1)
svyquantile(~api00, dclus1, c(.25,.5,.75))
svytotal(~enroll, dclus1, deff=TRUE)
svyratio(~api.stu, ~enroll, dclus1)
v<-svyvar(~api00+api99, dclus1)
v
print(v, cov=TRUE)
as.matrix(v)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw,
data=apistrat, fpc=~fpc)
jkstrat<-as.svrepdesign(dstrat)
svymean(~api00, jkstrat)
svymean(~factor(stype),jkstrat)
svyvar(~api00+api99,jkstrat)
svyquantile(~api00, jkstrat, c(.25,.5,.75))
svytotal(~enroll, jkstrat)
svyratio(~api.stu, ~enroll, jkstrat)
# coefficients of variation
cv(svytotal(~enroll,dstrat))
cv(svyratio(~api.stu, ~enroll, jkstrat))
# extracting information from the results
coef(svytotal(~enroll,dstrat))
vcov(svymean(~api00+api99,jkstrat))
SE(svymean(~enroll, dstrat))
confint(svymean(~api00+api00, dclus1))
confint(svymean(~api00+api00, dclus1), df=degf(dclus1))
# Design effect
svymean(~api00, dstrat, deff=TRUE)
svymean(~api00, dstrat, deff="replace")
svymean(~api00, jkstrat, deff=TRUE)
svymean(~api00, jkstrat, deff="replace")
(a<-svytotal(~enroll, dclus1, deff=TRUE))
deff(a)
?svytable()
data(api)
xtabs(~sch.wide+stype, data=apipop)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
summary(dclus1)
(tbl <- svytable(~sch.wide+stype, dclus1))
plot(tbl)
plot(tbl)
fourfoldplot(svytable(~sch.wide+comp.imp+stype,design=dclus1,round=TRUE), conf.level=0)
library(help=survey)
?svyby
data(api)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
svyby(~api99, ~stype, dclus1, svymean)
svyby(~api99, ~stype, dclus1, svyquantile, quantiles=0.5,ci=TRUE,vartype="ci")
svyby(~api99, ~stype, dclus1, svyquantile, quantiles=0.5,ci=TRUE,vartype="ci")
svyby(~api99, ~stype, dclus1, svyquantile, quantiles=0.5, keep.var=FALSE)
svyby(~api99, list(school.type=apiclus1$stype), dclus1, svymean)
svyby(~api99+api00, ~stype, dclus1, svymean, deff=TRUE,vartype="ci")
svyby(~api99+api00, ~stype+sch.wide, dclus1, svymean, keep.var=FALSE)
rclus1<-as.svrepdesign(dclus1)
svyby(~api99, ~stype, rclus1, svymean)
svyby(~api99, ~stype, rclus1, svyquantile, quantiles=0.5)
svyby(~api99, list(school.type=apiclus1$stype), rclus1, svymean, vartype="cv")
svyby(~enroll,~stype, rclus1,svytotal, deff=TRUE)
svyby(~api99+api00, ~stype+sch.wide, rclus1, svymean, keep.var=FALSE)
##report raw number of observations
svyby(~api99+api00, ~stype+sch.wide, rclus1, unwtd.count, keep.var=FALSE)
mns<-svyby(~api99, ~stype, rclus1, svymean,covmat=TRUE)
vcov(mns)
svycontrast(mns, c(E = 1, M = -1))
str(svyby(~api99, ~stype, rclus1, svymean,return.replicates=TRUE))
## extractor functions
(a<-svyby(~enroll, ~stype, rclus1, svytotal, deff=TRUE, verbose=TRUE,
vartype=c("se","cv","cvpct","var")))
deff(a)
SE(a)
(a<-svyby(~enroll, ~stype, rclus1, svytotal, deff=TRUE, verbose=TRUE,
vartype=c("se","cv","cvpct","var")))
deff(a)
SE(a)
cv(a)
coef(a)
confint(a, df=degf(rclus1))
svyby(~api.stu, by=~stype, denominator=~enroll, design=dclus1, svyratio)
## empty groups
svyby(~api00,~comp.imp+sch.wide,design=dclus1,svymean)
svyby(~api00,~comp.imp+sch.wide,design=dclus1,svymean,drop.empty.groups=FALSE)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1)
svyby(~api99, ~stype, dclus1, svymean)
A<-svyby(~api99, ~stype, dclus1, svymean)
plot(A)
summary(A)
head(apiclus1)
head(apiclus1)
apropos("na")
?na.omit
na.exlude(c(1,2,3,4,5,NA,3,NA))
na.exlude(c(1,2,3,4,5,NA,3,NA))
na.OMIT(c(1,2,3,4,5,NA,3,NA))
na.omit(c(1,2,3,4,5,NA,3,NA))
data.frame(x=rnorm(100),y=c(runif(90),rep(NA,10)))
as<-data.frame(x=rnorm(100),y=c(runif(90),rep(NA,10)))
na.omit(as)
a<-na.omit(as)
mean(A)
mean(a)
a
str(a)
mean(a)
str(a)
list(a)
a[[1]]
a[1}
a[1]
a
dim(a)
summary(a)
cor(a)
colMeans(a)
rowMeans(a)
plot(a)
plot(a)
?plogis()
t-test(a)
t.test(a)
t.test(a$x,a$y)
title(main="Incidencia de pobreza por departamento"col.main="brown",cez.main=1.5)
#area
knitr::opts_chunk$set(echo = TRUE)
S<-matrix(c(2,1.13,1.13,1))
eigen(S)
S<-matrix(c(2,1.13,1.13,1),2,2)
eigen(S)
princomp(S)
pca
1.13/(sqrt(2)*sqrt(1))
x1<-rnorm(100)
x2<-0.79*x1+rnorm(100)
cor(x1,x2)
x1<-rnorm(100)
x2<-0.79*x1+rnorm(100)
cor(x1,x2)
x1<-rnorm(1000)
x2<-0.79*x1+rnorm(1000)
cor(x1,x2)
x1<-rnorm(1000)
x2<-0.79*x1+rnorm(1000)
cor(x1,x2)
plot(x1,x2)
x1<-rnorm(1000,2,5)
x2<-0.79*x1+rnorm(1000)
plot(x1,x2)
cor(x1,x2)
x1<-rnorm(1000,2,5)
x2<-2+0.7*x1+rnorm(1000)
cor(x1,x2)
plot(x1,x2)
x1<-rnorm(100,2,5)
x2<-1+0.6*x1+rnorm(100)
cor(x1,x2)
plot(x1,x2)
x1<-rnorm(100,2,5)
x2<-1+0.3*x1+rnorm(100)
cor(x1,x2)
plot(x1,x2)
lm(x1~x2)
abline(lm(x1~x2))
abline(lm(x2~x1))
abline(lm(x2~x1),red)
abline(lm(x2~x1),col="red")
plot(x1,x2)
abline(lm(x2~x1),col="red")
cov(x1,x2)
?cov(x1,x2)
data<-data.frame(x1,x2)
cov(data)
princomp(data)
?princomp(data)
?predict.princomp
prcomp(data)
princomp(data)
princomp(data)
princomp(data)
p1<-princomp(data)
predict(p1)
predict(p1,datap)
data1<-predict(p1)
str(data1)
plot(data1)
plot(data1)
plot(x1,x2)
points(data1,col="blue")
lm(x2~x1)
?princomp
r<-matrix(c(1,.8,1,.8,1),2,2)
r<-matrix(c(1,.8,.8,1),2,2)
princomp(r)
p2<-princomp(r)
str(p2)
p2$loadings
eigen(r)
p2
p2$sdev**2
p2
str(p2)
?princomp()
plot(data)
plot(p2)
p2
p2$sdev
p2$sdev**2
r
princomp(r)
r<-matrix(covmat=c(1,.8,.8,1),2,2)
p2<-princomp(covmat=r)
p2$loadings
p2
?princomp()
?require
require(c(foreign,MASS))
require(foreign)
require(foreign,MASS)
require(rgl,FactorMineR,ade4,ellipse)
library(ade4)
library(rgl)
library(FactoMIneR)
?require
setwd("/home/alvaro/Dropbox/!maestria_mm/multivariante/latin2015r")
library(foreign)
data("Latinobarometro_2015_Esp.rdata")
setwd("/home/alvaro/Dropbox/!maestria_mm/multivariante/latin2015r")
library(foreign)
data("Latinobarometro_2015_Esp.rdata")
rdata
??rdata
dir()
load("Latinobarometro_2015_Esp.rdata")
View(Latinobarometro_2015_Esp)
rm(Latinobarometro_2015_Esp)
setwd("/home/alvaro/Dropbox/!maestria_mm/multivariante/latin2015r")
library(foreign)
load("Latinobarometro_2015_Esp.rdata")
data<-Latinobarometro_2015_Esp
rm(Latinobarometro_2015_Esp)
setwd("/home/alvaro/Dropbox/!maestria_mm/multivariante/latin2015r")
dir()
str(data)
typeof(data)
names(data)
table(data$P56ST)
barplot(table(data$P56ST))
barplot(table(data$P56ST))
data$idenpa
table(data$idenpa)
tapply(data$P56ST)
tapply(data$P56ST,data$idenpa)
tapply(data$P56ST,data$idenpa,mean)
library(survey)
names(data)
data[,58:66]
vacp<-data[,58:66]
names(vacp)
vacp<-data[,c(58:66,69:76)]
names(vacp)
vacp<-data[,c(58:66,69:76,104:109)]
names(vacp)
cov(vacp)
names(data)
str(data$wt)
?princomp()
summary(vacp)
for(i in names(vacp)){
vacp<-vacp[vacp[,i]>0,]
}
summary(vacp)
min(vacp)
max(vacp)
princomp(vacp)
pca1<-princomp(vacp)
pca
summary(pca1)
summary(pca1)
pca1<-princomp(vacp[,-"wt"])
names(vacp)
vacp<-data[,c(58:66,69:76,104:109,"wt","idenpa")]
vacp<-data[,c(58:66,69:76,104:109,"wt","idenpa")]
names(data)
vacp<-data[,c(58:66,69:76,104:109,338,2)]
names(vacp)
summary(vacp)
for(i in names(vacp)){
vacp<-vacp[vacp[,i]>0,]
}
names(vacp)
pca1<-princomp(vacp[,1:23])
summary(pca1)
pca1<-princomp(vacp[,1:23],cor=T)
summary(pca1)
pca1<-princomp(vacp[,1:23],cor=F)
summary(pca1)
vacp<-data[,c(58:66,69:76,338,2)]
names(vacp)
summary(vacp)
for(i in names(vacp)){
vacp<-vacp[vacp[,i]>0,]
}
pca1<-princomp(vacp[,1:23],cor=F)
names(vapc)
names(vacp)
pca1<-princomp(vacp[,1:17],cor=F)
summary(pca1)
pca1<-princomp(vacp[,1:17],cor=T)
summary(pca1)
pca1<-princomp(vacp[,1:17],cor=T)
?princomp()
predict(pc1)
predict(pca1)
table(data$idenpa)
